---
apiVersion: v1
kind: Namespace
metadata:
  name: kafka
---
apiVersion: v1
kind: Service
metadata:
  name: zk-hs
  namespace: kafka
  labels:
    app: zk
spec:
  clusterIP: None
  ports:
  - port: 2888
    protocol: TCP
    name: peer-comms
  - port: 3888
    protocol: TCP
    name: leader-election
  - port: 2181
    protocol: TCP
    name: client
  selector:
    app: zk
---
apiVersion: v1
kind: Service
metadata:
  name: zk-cs
  namespace: kafka
  labels:
    app: zk
spec:
  ports:
  - port: 8080
    protocol: TCP
    name: admin
  type: LoadBalancer
  selector:
    app: zk
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: zk-pdb
  namespace: kafka
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: zk
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: zk
  namespace: kafka
spec:
  selector:
    matchLabels:
      app: zk
  serviceName: zk-hs
  replicas: 3
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: OrderedReady
  template:
    metadata:
      labels:
        app: zk
    spec:
      containers:
      - name: k8s-zookeeper
        imagePullPolicy: IfNotPresent
        image: "myzoo:1.0"
        resources:
          requests:
            memory: "2Gi"
            cpu: "0.5"
          limits:
            memory: "3Gi"
            cpu: "0.5"
        env:
        - name: K8S_ZOO_REPLICAS
          value: "3"
        ports:
        - containerPort: 2181
          name: client
        - containerPort: 2888
          name: peer-comms
        - containerPort: 3888
          name: leader-election
        - containerPort: 8080
          name: admin
        volumeMounts:
        - name: datadir
          mountPath: /data
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
  volumeClaimTemplates:
  - metadata:
      name: datadir
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-hs
  namespace: kafka
  labels:
    app: kafka
spec:
  clusterIP: None
  ports:
  - port: 29092
    protocol: TCP
    name: internal
  selector:
    app: kafka
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka-broker
  namespace: kafka
spec:
  selector:
    matchLabels:
      app: kafka
  serviceName: kafka-hs
  replicas: 3
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: OrderedReady
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
      - name: kafka-broker
        imagePullPolicy: IfNotPresent
        image: "mykafka:1.0"
        resources:
          requests:
            memory: "3Gi"
            cpu: "0.5"
        env:
        - name: KAFKA_K8S
          value: "true"
        - name: ZOO_CONNECT
          value: "zk-hs"
        ports:
        - containerPort: 29092
          name: internal
        volumeMounts:
        - name: kafka-logs
          mountPath: /tmp/kafka-logs
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
  volumeClaimTemplates:
  - metadata:
      name: kafka-logs
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi